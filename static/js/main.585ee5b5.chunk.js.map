{"version":3,"sources":["serviceWorker.js","store/reducers/rootReducer.js","components/Cards.js","components/LandingPage.js","api/parserApi.js","store/actions/BooksAction.js","components/Input.js","components/SearchList.js","components/SearchPage.js","components/SinglePageCard.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","books","menu","value","search","author","likes","add","reducer","arguments","length","undefined","action","type","Object","objectSpread","data","newList","filter","item","best_book","title","toLowerCase","input","Cards","props","react_default","a","createElement","className","booksList","map","index","key","src","image_url","alt","Link","to","id","name","average_rating","connect","aria-hidden","components_Cards","parseXMLResponse","response","XMLResponse","DOMParser","parseFromString","getElementsByTagName","construct","Array","toConsumableArray","result","XMLToJson","XML","allNodes","children","jsonResult","forEach","node","nodeName","innerHTML","this","setState","fetchingData","Input","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","ismounted","placeholder","onChange","handleInput","Component","dispatch","e","target","lists","SearchPage","components_Input","components_SearchList","ownProps","slug","params","item_slug","book","find","data-sal","data-sal-delay","data-sal-duration","data-sal-easing","concat","original_publication_day","original_publication_month","original_publication_year","href","App","fetchBooks","HashRouter","Switch","Route","path","exact","component","LandingPage","SinglePageCard","requestUri","Axios","get","res","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.585ee5b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  books: [],\n  menu: [],\n  value: \"\",\n  search: [],\n  author: [],\n  likes: [],\n  add: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FETCH_BOOKS\":\n      debugger;\n      return {\n        ...state,\n        books: action.data\n      };\n    case \"INPUT_CHANGE\":\n      console.log(\"Input\", action);\n      let newList = state.books.filter(item => {\n        return (\n          item.best_book.title\n            .toLowerCase()\n            .search(action.input.toLowerCase()) !== -1\n        );\n      });\n\n      return {\n        ...state,\n        search: newList,\n        value: action.input\n      };\n\n    default:\n      return state;\n  }\n};\nexport default reducer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Cards = props => {\n  return (\n    <div className=\"cards\">\n      {props.booksList.map((item, index) => {\n        return (\n          <div className=\"card\" key={index}>\n            <div className=\"overlay\">\n              <img src={item.best_book.image_url} alt=\"\" />\n              <div className=\"strip\">\n                <div className=\"like-menu\" />\n              </div>\n            </div>\n            <Link to={\"/\" + item.best_book.id}>\n              <h2>{item.best_book.title}</h2>\n            </Link>\n            <br />\n            <div>\n              <b>Author:</b> {item.best_book.author.name}\n            </div>\n            <div>\n              <b>Avg. Rating:</b> {item.average_rating}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport Cards from \"./Cards\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst LandingPage = props => {\n  return (\n    <div className=\"main-wrap\">\n      <div className=\"container\">\n        <Link to=\"/search\">\n          <i className=\"fa fa-search fa-2x top-bar\" aria-hidden=\"true\" />\n        </Link>\n        <h1>Good Reads Library</h1>\n      </div>\n      <h2 className=\"cards-title\">Favourite</h2>\n\n      <Cards booksList={props.booksList} />\n    </div>\n  );\n};\nconst mapStateToProps = state => {\n  return {\n    booksList: state.books\n  };\n};\nexport default connect(mapStateToProps)(LandingPage);\n","  // parse string xml received from goodreads api\r\n  export function parseXMLResponse(response)  {\r\n    const parser = new DOMParser();\r\n    const XMLResponse = parser.parseFromString(response, \"application/xml\");\r\n    const parseError = XMLResponse.getElementsByTagName(\"parsererror\");\r\n\r\n    if (parseError.length) {\r\n      this.setState({\r\n        error: \"There was an error fetching results.\",\r\n        fetchingData: false\r\n      });\r\n    } else {\r\n      const XMLresults = new Array(...XMLResponse.getElementsByTagName(\"work\"));\r\n      const searchResults = XMLresults.map(result => XMLToJson(result));\r\n     return searchResults;\r\n    }\r\n  };\r\n\r\n  // Function to convert simple XML document into JSON.\r\n  // Loops through each child and saves it as key, value pair\r\n  // if there are sub-children, call the same function recursively on its children.\r\n  export function XMLToJson(XML) {\r\n    const allNodes = new Array(...XML.children);\r\n    const jsonResult = {};\r\n    allNodes.forEach(node => {\r\n      if (node.children.length) {\r\n        jsonResult[node.nodeName] = XMLToJson(node);\r\n      } else {\r\n        jsonResult[node.nodeName] = node.innerHTML;\r\n      }\r\n    });\r\n    return jsonResult;\r\n  };","import Axios from \"axios\";\nimport { parseXMLResponse } from \"../../api/parserApi\";\n\nexport const FetchApiBooks = () => {\n  return dispatch => {\n    const apiKey = \"kHZsEVYjvn6Hh865MHrrag\";\n\n    const searchText = \"programming languages\";\n\n    const requestUri =\n      `https://cors-anywhere.herokuapp.com/` +\n      `https://www.goodreads.com/search/index.xml?key=${apiKey}&q=${searchText}`;\n\n    Axios.get(requestUri)\n      .then(res => res.data)\n      .then(data => {\n        dispatch({ type: \"FETCH_BOOKS\", data: parseXMLResponse(data) });\n      });\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ismounted = false;\n  }\n\n  componentDidMount() {\n    this.ismounted = true;\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search.. \"\n          value={this.props.input}\n          onChange={this.props.handleInput}\n        />\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  if (this.ismounted) {\n    this.ismounted = false;\n    return {\n      input: \"\"\n    };\n  }\n\n  return {\n    input: state.input\n  };\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleInput: e => {\n      dispatch({ type: \"INPUT_CHANGE\", input: e.target.value });\n    }\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Input);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nfunction SearchList(props) {\n  debugger;\n  return (\n    <div className=\"search-list\">\n      {props.value &&\n        props.lists.map((item, index) => {\n          return (\n            <Link className=\"item\" key={index} to={\"/\" + item.best_book.id}>\n              <div className=\"item-title\">{item.best_book.title}</div>\n              <div className=\"item-author\">{item.best_book.author.name}</div>\n            </Link>\n          );\n        })}\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  console.log(state.value);\n  return {\n    lists: state.search,\n    value: state.value\n  };\n};\n\nexport default connect(mapStateToProps)(SearchList);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Input from \"./Input\";\nimport SearchList from \"./SearchList\";\n\nexport default function SearchPage() {\n  return (\n    <div className=\"search\">\n      <Link to=\"/\">\n        <i className=\"fa fa-times fa-2x top-bar\" aria-hidden=\"true\" />\n      </Link>\n      <Input />\n      <SearchList />\n    </div>\n  );\n}\n","import React from 'react'\nimport { connect } from 'react-redux';\n\nimport { Link } from 'react-router-dom';\n\n function SinglePageCard(props) {\n\n  debugger;\n     \n  return (\n    props.book ?\n  <div className=\"div\" data-sal=\"zoom-out\"\n  data-sal-delay=\"500\"\n  data-sal-duration=\"1200\"\n  data-sal-easing=\"ease-out-bounce\">\n    <Link to='/search'><i className=\"fa fa-search fa-2x top-bar\" aria-hidden=\"true\" ></i></Link>\n    <div className=\"single-card\">\n   <div className=\"book\"> {<img src={props.book.best_book.image_url} alt=\"\" />}\n   </div>\n     <div className=\"book-text\">\n     <h1> {props.book.best_book.title}</h1>\n     \n   {/* <div className=\"text\"  dangerouslySetInnerHTML={{__html:props.book.content}}></div> */}\n\n\n   <div>\n          <p>\n            Published Date:{\" \"}\n            {`${props.book.original_publication_day}/${\n              props.book.original_publication_month\n            }/${props.book.original_publication_year}`}\n            .{\" \"}\n            <a\n              href={`https://www.goodreads.com/book/show/${\n                props.book.best_book.id\n              }`}\n            >\n              Learn More\n            </a>\n          </p>\n        </div>\n\n\n  <Link to='/' className=\"btn-back\">Go back</Link>\n     </div>\n    \n   \n    </div>\n  </div> :  <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\n  )\n}\nconst mapStateToProps = (state, ownProps) => {\n\n  debugger;\n    let slug = ownProps.match.params.item_slug;\n    return{\n        book: state.books.find(item => item.best_book.id === slug)\n    }\n}\nexport default connect(mapStateToProps)(SinglePageCard);","import React, { Component } from \"react\";\nimport { HashRouter, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport LandingPage from \"./components/LandingPage\";\nimport { FetchApiBooks } from \"./store/actions/BooksAction\";\nimport SearchPage from \"./components/SearchPage\";\nimport SinglePageCard from \"./components/SinglePageCard\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            <Route path=\"/\" exact component={LandingPage} />\n            <Route path=\"/search\" exact component={SearchPage} />\n            <Route path=\"/:item_slug\" exact component={SinglePageCard} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchBooks: () => {\n      dispatch(FetchApiBooks());\n    }\n  };\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"./store/reducers/rootReducer\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}